name: Build Electron App

on:
  push:
    branches:
      - main # Replace with the name of your default branch if different

jobs:
  build:
    runs-on: windows-latest

    steps:
    - name: Check out repository
      uses: actions/checkout@v2

    - name: Set up Node.js
      uses: actions/setup-node@v2
      with:
        node-version: 16 # You can use other Node.js versions as well

    - name: Install dependencies
      run: npm ci
      working-directory: desktop

    - name: Build and package Electron app
      run: npm run build
      working-directory: desktop
      
    - name: List contents of working directory
      run: Get-ChildItem -Name
      working-directory: desktop

    - name: Display electron-packager command output
      run: |
        npm install electron-packager -g
        electron-packager . --platform=win32 --arch=x64 --asar --out=dist --overwrite --debug
      working-directory: desktop
      
    - name: Upload build artifact
      uses: actions/upload-artifact@v2
      with:
        name: electron-app
        path: desktop/dist/*.exe # Update the artifact path

    - name: Install and authenticate with GitHub CLI
      run: |
        Invoke-WebRequest -Uri "https://github.com/cli/cli/releases/download/v2.28.0/gh_2.28.0_windows_amd64.zip" -OutFile "gh.zip"
        Expand-Archive -Path "gh.zip" -DestinationPath "gh"
        $Env:Path += ";$(Get-Location)\gh\bin"
        echo ${{ secrets.PAT }} | gh auth login --with-token

    - name: List releases and tags
      run: |
        gh release list
        git fetch --tags
        git tag -l

    - name: Delete existing release and tag if exist
      run: |
        gh release delete v1.0.0 --yes || echo "No existing release found"
        gh api repos/:owner/:repo/git/refs/tags/v1.0.0 -X DELETE || echo "No existing tag found"
        exit 0
      env:
        GITHUB_TOKEN: ${{ secrets.PAT }}



    - name: Push Tag
      run: |
        git tag v1.0.0 || echo "Tag already exists"
        git push origin v1.0.0 || echo "Tag already pushed"

    - name: Create Release
      id: create_release
      run: |
        gh release create v1.0.0 --title "Release v1.0.0" --notes "Description of the release. Please download 'Your App Name-Setup-1.0.0.exe' instead of the source code archives."
      env:
        GITHUB_TOKEN: ${{ secrets.PAT }}

    - name: Fetch Release
      id: fetch_release
      run: |
        echo "UPLOAD_URL=$(gh api repos/:owner/:repo/releases/tags/v1.0.0 --jq '.upload_url')" | Out-File -FilePath $env:GITHUB_ENV -Encoding utf8 -Append
      env:
        GITHUB_TOKEN: ${{ secrets.PAT }}

    - name: Upload Release Asset
      uses: actions/upload-release-asset@v1
      env:
        GITHUB_TOKEN: ${{ secrets.PAT }}
      with:
        upload_url: ${{ env.UPLOAD_URL }}
        asset_path: ./desktop/dist/Your App Name-Setup-1.0.0.exe
        asset_name: Your App Name-Setup-1.0.0.exe
        asset_content_type: application/octet-stream


